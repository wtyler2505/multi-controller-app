# Task ID: 3
# Title: Prototype UI with Serial Echo (C# Native AOT and Rust)
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Develop minimal UIs in both C# (.NET 8 Native AOT) and Rust to test serial communication and measure resource usage.
# Details:
Implement a single-window UI in both C# (WinUI 3, Native AOT) and Rust (egui or native Win32 bindings). Integrate basic serial port echo functionality using System.IO.Ports (C#) and serialport-rs (Rust). Measure RAM, CPU, and cold-start times using Windows Performance Monitor.

# Test Strategy:
Run both prototypes on Windows 11. Measure startup time, idle CPU, and RAM usage. Validate serial echo functionality with a loopback device.

# Subtasks:
## 1. Set Up Minimal C# WinUI 3 Project with Native AOT [pending]
### Dependencies: None
### Description: Create a single-window C# application using WinUI 3 and configure it for .NET 8 Native AOT compilation.
### Details:
Initialize a new WinUI 3 project, add <PublishAot>true</PublishAot> to the project file, and ensure the app builds and runs as a native executable on Windows 11.

## 2. Set Up Minimal Rust UI Project [pending]
### Dependencies: None
### Description: Create a single-window Rust application using egui or native Win32 bindings.
### Details:
Initialize a new Rust project, select and integrate a minimal UI framework (egui or Win32), and ensure the app builds and runs on Windows 11.

## 3. Implement Serial Port Echo Functionality in Both UIs [pending]
### Dependencies: 3.1, 3.2
### Description: Integrate basic serial port echo logic using System.IO.Ports in C# and serialport-rs in Rust.
### Details:
Add code to both UIs to open a serial port, read incoming data, and immediately write it back (echo) to the sender.

## 4. Measure Resource Usage and Startup Performance [pending]
### Dependencies: 3.3
### Description: Profile RAM, CPU, and cold-start times for both prototypes using Windows Performance Monitor.
### Details:
Use Windows Performance Monitor to record memory usage, CPU utilization, and startup time for each app under identical conditions.

## 5. Document Implementation and Benchmark Results [pending]
### Dependencies: 3.4
### Description: Summarize implementation steps, challenges, and resource usage results for both C# and Rust prototypes.
### Details:
Prepare a report detailing setup, serial echo validation, and all measured performance metrics for both implementations.

