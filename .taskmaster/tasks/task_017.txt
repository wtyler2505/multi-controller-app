# Task ID: 17
# Title: Activate and Extend Performance Monitoring in Desktop App
# Status: pending
# Dependencies: 4
# Priority: medium
# Description: Integrate and activate startup performance validation and runtime CPU/RAM monitoring in the desktop app, logging violations to telemetry.
# Details:
1. In apps/desktop/Program.cs, locate the existing ValidateStartupPerformance() method (lines 48-61). In the App constructor, add a call to ValidateStartupPerformance() to ensure startup metrics are validated on every launch.
2. Implement runtime CPU and RAM monitoring using System.Diagnostics.PerformanceCounter or similar APIs. Create counters for process CPU usage (e.g., '% Processor Time') and memory usage (e.g., 'Working Set'). Poll these counters at a reasonable interval (e.g., every 5 seconds) on a background thread.
3. Define threshold values for CPU and RAM usage violations (e.g., CPU > 80% for 10s, RAM > 500MB). When a violation is detected, log a structured event to the app's telemetry system, including timestamp, metric, value, and context.
4. Ensure monitoring logic is lightweight to avoid introducing significant overhead. Consider using a library like AppMetrics for extensibility if future metrics are needed.
5. Document the monitoring approach and thresholds in the developer documentation.

# Test Strategy:
1. Manually verify that ValidateStartupPerformance() is invoked on app startup by setting a breakpoint or adding a temporary log statement.
2. Simulate high CPU and RAM usage (e.g., via stress tools or test code) and confirm that violations are detected and logged to telemetry with correct details.
3. Review telemetry logs to ensure events are structured and contain all required fields.
4. Use profiling tools (e.g., Visual Studio Diagnostic Tools) to confirm that the monitoring logic does not introduce significant performance overhead.
5. Add unit tests for threshold detection logic and mock telemetry logging.

# Subtasks:
## 1. Activate Startup Performance Validation [pending]
### Dependencies: None
### Description: Ensure that the desktop app validates startup performance on every launch by invoking the existing ValidateStartupPerformance() method in the App constructor.
### Details:
Locate the ValidateStartupPerformance() method in apps/desktop/Program.cs (lines 48-61). Add a call to this method in the App constructor so that startup metrics are validated each time the app starts.

## 2. Implement Runtime CPU and RAM Monitoring [pending]
### Dependencies: 17.1
### Description: Integrate runtime monitoring for CPU and RAM usage using appropriate APIs, polling at regular intervals on a background thread.
### Details:
Use System.Diagnostics.PerformanceCounter or similar APIs to create counters for process CPU usage (e.g., '% Processor Time') and memory usage (e.g., 'Working Set'). Poll these counters every 5 seconds on a background thread, ensuring the monitoring logic is lightweight.

## 3. Define Thresholds and Log Telemetry Events for Violations [pending]
### Dependencies: 17.2
### Description: Establish threshold values for CPU and RAM usage, and log structured telemetry events when violations occur.
### Details:
Set thresholds (e.g., CPU > 80% for 10s, RAM > 500MB). When a violation is detected, log a structured event to the app's telemetry system, including timestamp, metric, value, and context.

## 4. Document Monitoring Logic and Thresholds [pending]
### Dependencies: 17.3
### Description: Document the implemented monitoring approach, including logic and threshold values, in the developer documentation.
### Details:
Update developer documentation to describe the monitoring approach, APIs used, polling intervals, threshold values, and telemetry event structure. Include rationale for chosen thresholds and any extensibility considerations.

