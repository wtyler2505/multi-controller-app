{
  "name": "multi-controller-app",
  "version": "1.0.0",
  "packageManager": "pnpm@10.13.1",
  "description": "This repository contains the source code and documentation for a lightweight Windows application that can discover, connect to and control heterogeneous hardware (Arduino/ESP32/ESP8266/RioRand/Raspberry Pi) over serial, TCP/UDP or SSH.  The project is designed to be portable (single `.exe`), resource‑efficient (startup < 2 s, idle CPU ≤ 2 %, base RAM ≤ 150 MB) and extensible via plug‑in drivers.",
  "main": "index.js",
  "directories": {
    "doc": "docs"
  },
  "scripts": {
    "dev": "turbo dev",
    "prebuild": "npm run research:validate",
    "build": "turbo build",
    "pretest": "npm run research:validate",
    "test": "turbo test",
    "test:unit": "turbo test:unit",
    "test:integration": "turbo test:integration",
    "test:e2e": "turbo test:e2e",
    "lint": "turbo lint",
    "typecheck": "turbo typecheck",
    "format": "turbo format",
    "clean": "turbo clean",
    "changeset": "changeset",
    "version": "changeset version && pnpm install --no-frozen-lockfile",
    "release": "turbo build && changeset publish",
    "graph": "turbo graph",
    "prepare": "husky",
    "packages:list": "pnpm ls -r --depth -1",
    "packages:update": "pnpm update -r --interactive --latest",
    "affected:build": "turbo build --filter='...[origin/main]'",
    "affected:test": "turbo test --filter='...[origin/main]'",
    "affected:lint": "turbo lint --filter='...[origin/main]'",
    "git:install-hooks": "powershell -ExecutionPolicy Bypass -File scripts/git-automation/install-hooks.ps1",
    "git:install-hooks-bash": "bash scripts/git-automation/install-hooks.sh",
    "git:check-secrets": "node scripts/git-automation/secrets-scanner.js",
    "git:check-perf": "powershell -ExecutionPolicy Bypass -File scripts/git-automation/performance-gate.ps1",
    "git:check-perf-bash": "bash scripts/git-automation/performance-gate.sh",
    "task:branch": "node scripts/git-automation/task-branch.js",
    "task:commit": "node scripts/git-automation/smart-commit.js",
    "task:pr": "node scripts/git-automation/pr-create.js",
    "task:start": "node scripts/git-automation/task-branch.js",
    "task:complete": "echo 'Use: mcp__taskmaster-ai__set_task_status --id=<id> --status=done'",
    "sync:status": "powershell -ExecutionPolicy Bypass -File scripts/git-automation/sync-status.ps1",
    "sync:status-detailed": "powershell -ExecutionPolicy Bypass -File scripts/git-automation/sync-status.ps1 -Detailed",
    "sync:watch": "powershell -ExecutionPolicy Bypass -File scripts/git-automation/sync-status.ps1 -Watch",
    "sync:auto": "powershell -ExecutionPolicy Bypass -File scripts/git-automation/sync-status.ps1 -AutoFix",
    "validate:all": "npm run git:check-secrets && npm run git:check-perf",
    "validate:secrets": "npm run git:check-secrets",
    "validate:perf": "npm run git:check-perf",
    "validate:ps1": "node scripts/git-automation/validate-powershell.js",
    "benchmark:all": "powershell -ExecutionPolicy Bypass -File tests/performance/run-all-benchmarks.ps1 -ShowDetails",
    "benchmark:csharp": "powershell -ExecutionPolicy Bypass -File tests/performance/benchmark-csharp.ps1 -ShowDetails",
    "benchmark:rust": "powershell -ExecutionPolicy Bypass -File tests/performance/benchmark-rust.ps1 -ShowDetails",
    "benchmark:compare": "powershell -ExecutionPolicy Bypass -File tests/performance/compare-benchmarks.ps1 -ShowDetails -GenerateChart",
    "benchmark:quick": "powershell -ExecutionPolicy Bypass -File tests/performance/run-all-benchmarks.ps1 -MonitorDuration 30",
    "memory:install": "powershell -ExecutionPolicy Bypass -File scripts/install-memory-hooks.ps1",
    "memory:install-force": "powershell -ExecutionPolicy Bypass -File scripts/install-memory-hooks.ps1 -Force",
    "memory:search": "powershell -ExecutionPolicy Bypass -File scripts/Search-CipherMemory.ps1",
    "memory:task-start": "powershell -ExecutionPolicy Bypass -File scripts/memory-hooks.ps1 -Event task-start",
    "memory:task-complete": "powershell -ExecutionPolicy Bypass -File scripts/memory-hooks.ps1 -Event task-complete",
    "memory:store-pattern": "powershell -ExecutionPolicy Bypass -File scripts/memory-hooks.ps1 -Event code-pattern",
    "memory:store-error": "powershell -ExecutionPolicy Bypass -File scripts/memory-hooks.ps1 -Event error-resolved",
    "memory:store-test": "powershell -ExecutionPolicy Bypass -File scripts/memory-hooks.ps1 -Event test-pass",
    "memory:stats": "echo 'Use MCP: mcp__cipher-aggregator__get_usage_stats'",
    "memory:compliance": "powershell -ExecutionPolicy Bypass -File scripts/memory-enforcement.ps1 status",
    "memory:log": "powershell -ExecutionPolicy Bypass -File scripts/memory-enforcement.ps1 log",
    "memory:reset-session": "powershell -ExecutionPolicy Bypass -File scripts/memory-enforcement.ps1 reset",
    "memory:backup": "echo 'Creating memory backup...' && powershell -ExecutionPolicy Bypass -Command \"Copy-Item -Path '.cipher/memory' -Destination '.cipher/backups/memory-$(Get-Date -Format 'yyyyMMdd-HHmmss')' -Recurse -Force\"",
    "memory:help": "powershell -ExecutionPolicy Bypass -File scripts/memory-hooks.ps1",
    "research:check": "powershell -ExecutionPolicy Bypass -File scripts/pre-task-research.ps1",
    "research:validate": "powershell -ExecutionPolicy Bypass -Command \"$branch = git rev-parse --abbrev-ref HEAD 2>$null; $taskId = $branch -replace '.*task[- ]?([0-9]+).*', '$1'; if ($taskId -match '^[0-9]+$') { & './scripts/pre-task-research.ps1' -TaskId $taskId } else { Write-Host '[INFO] No task ID in branch - skipping research check' -ForegroundColor Yellow; exit 0 }\"",
    "research:enforce": "powershell -ExecutionPolicy Bypass -Command \"$branch = git rev-parse --abbrev-ref HEAD 2>$null; $taskId = $branch -replace '.*task[- ]?([0-9]+).*', '$1'; if ($taskId -match '^[0-9]+$') { & './scripts/pre-task-research.ps1' -TaskId $taskId -FailIfMissing } else { Write-Host '[WARNING] No task ID in branch!' -ForegroundColor Yellow; $taskId = Read-Host 'Enter task ID'; & './scripts/pre-task-research.ps1' -TaskId $taskId -FailIfMissing }\"",
    "task:wrapper": "powershell -ExecutionPolicy Bypass -File scripts/task-master-wrapper.ps1",
    "tm": "powershell -ExecutionPolicy Bypass -File scripts/task-master-wrapper.ps1",
    "compliance:check": "powershell -ExecutionPolicy Bypass -File scripts/compliance-tracker.ps1",
    "compliance:report": "powershell -ExecutionPolicy Bypass -File scripts/compliance-tracker.ps1 -GenerateReport",
    "compliance:details": "powershell -ExecutionPolicy Bypass -File scripts/compliance-tracker.ps1 -ShowDetails"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "devDependencies": {
    "@changesets/cli": "^2.27.1",
    "@eslint/js": "^9.34.0",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@types/jest": "^30.0.0",
    "@types/node": "^24.3.0",
    "@typescript-eslint/eslint-plugin": "^8.40.0",
    "@typescript-eslint/parser": "^8.40.0",
    "eslint": "^9.34.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-prettier": "^5.5.4",
    "husky": "^9.1.7",
    "jest": "^30.0.5",
    "lint-staged": "^16.1.5",
    "nodemon": "^3.1.10",
    "prettier": "^3.6.2",
    "rimraf": "^5.0.5",
    "task-master-ai": "^0.25.1",
    "ts-jest": "^29.4.1",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "turbo": "^2.0.0",
    "typescript": "^5.9.2"
  }
}
