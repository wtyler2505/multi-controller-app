#!/bin/bash

# Commit message hook for Multi-Controller App
# Enforces conventional commits and task references

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the commit message file
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Skip if this is a merge commit
if [ -f .git/MERGE_HEAD ]; then
    exit 0
fi

echo -e "${BLUE}üìù Validating commit message...${NC}"

# Function to check conventional commit format
check_conventional_commit() {
    local msg="$1"
    
    # Conventional commit pattern: type(scope): description
    # Types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert
    local pattern="^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([a-z0-9-]+\))?: .{1,}"
    
    if [[ "$msg" =~ $pattern ]]; then
        return 0
    else
        return 1
    fi
}

# Function to check for task reference
check_task_reference() {
    local msg="$1"
    
    # Task reference pattern: (task X.Y) or [task X.Y] or task #X.Y
    local pattern="(\(task [0-9]+(\.[0-9]+)*\)|\[task [0-9]+(\.[0-9]+)*\]|task #[0-9]+(\.[0-9]+)*)"
    
    if [[ "$msg" =~ $pattern ]]; then
        return 0
    else
        return 1
    fi
}

# Function to extract task ID from branch name
get_task_from_branch() {
    local branch=$(git symbolic-ref --short HEAD 2>/dev/null)
    
    # Pattern: feature/task-X.Y-* or task-X.Y
    if [[ "$branch" =~ task-([0-9]+(\.[0-9]+)*) ]]; then
        echo "${BASH_REMATCH[1]}"
        return 0
    fi
    
    return 1
}

# Validation flags
VALID=true
WARNINGS=""

# Check conventional commit format
if ! check_conventional_commit "$COMMIT_MSG"; then
    echo -e "${RED}‚ùå Commit message does not follow conventional format${NC}"
    echo -e "${YELLOW}   Expected format: type(scope): description${NC}"
    echo -e "${YELLOW}   Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert${NC}"
    echo -e "${YELLOW}   Example: feat(serial): add reconnection logic${NC}"
    VALID=false
fi

# Check for task reference
if ! check_task_reference "$COMMIT_MSG"; then
    # Try to get task from branch name
    TASK_ID=$(get_task_from_branch)
    
    if [ ! -z "$TASK_ID" ]; then
        # Append task reference to commit message
        echo "$COMMIT_MSG (task $TASK_ID)" > "$COMMIT_MSG_FILE"
        echo -e "${GREEN}‚úÖ Added task reference from branch: (task $TASK_ID)${NC}"
    else
        WARNINGS="${WARNINGS}${YELLOW}‚ö†Ô∏è  No task reference found in commit message${NC}\n"
        WARNINGS="${WARNINGS}${YELLOW}   Consider adding: (task X.Y) at the end${NC}\n"
    fi
fi

# Check commit message length
FIRST_LINE=$(echo "$COMMIT_MSG" | head -1)
if [ ${#FIRST_LINE} -gt 72 ]; then
    WARNINGS="${WARNINGS}${YELLOW}‚ö†Ô∏è  First line exceeds 72 characters (${#FIRST_LINE} chars)${NC}\n"
fi

# Check for empty body on complex changes
CHANGED_FILES=$(git diff --cached --numstat | wc -l)
COMMIT_LINES=$(echo "$COMMIT_MSG" | wc -l)
if [ $CHANGED_FILES -gt 10 ] && [ $COMMIT_LINES -eq 1 ]; then
    WARNINGS="${WARNINGS}${YELLOW}‚ÑπÔ∏è  Large change (${CHANGED_FILES} files) with no commit body${NC}\n"
    WARNINGS="${WARNINGS}${YELLOW}   Consider adding details about the changes${NC}\n"
fi

# Output results
if [ "$VALID" = false ]; then
    echo -e "\n${RED}‚ùå Commit message validation failed!${NC}"
    echo -e "\n${YELLOW}To fix:${NC}"
    echo "  1. Cancel this commit (exit editor without saving)"
    echo "  2. Use: git commit -m \"type(scope): description (task X.Y)\""
    echo -e "\n${YELLOW}To bypass (not recommended):${NC}"
    echo "  git commit --no-verify"
    exit 1
fi

if [ ! -z "$WARNINGS" ]; then
    echo -e "$WARNINGS"
    echo -e "${YELLOW}‚ÑπÔ∏è  Commit proceeding with warnings${NC}"
fi

echo -e "${GREEN}‚úÖ Commit message validation passed${NC}"
exit 0