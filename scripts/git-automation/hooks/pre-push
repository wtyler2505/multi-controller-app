#!/bin/bash

# Pre-push hook for Multi-Controller App
# Final validation before pushing to remote

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}╔══════════════════════════════════════╗${NC}"
echo -e "${BLUE}║       Pre-Push Validation Suite      ║${NC}"
echo -e "${BLUE}╚══════════════════════════════════════╝${NC}"

# Get the repository root
REPO_ROOT=$(git rev-parse --show-toplevel)
cd "$REPO_ROOT"

# Read stdin for branch info
while read local_ref local_sha remote_ref remote_sha
do
    # Extract branch name
    BRANCH=$(echo "$local_ref" | sed 's/refs\/heads\///')
    
    echo -e "\n${BLUE}Pushing branch: $BRANCH${NC}"
    
    # Track validation results
    ALL_PASSED=true
    
    # 1. Check for uncommitted changes
    echo -e "\n${YELLOW}[1/5] Checking for uncommitted changes...${NC}"
    if [ -n "$(git status --porcelain)" ]; then
        echo -e "${YELLOW}⚠️  You have uncommitted changes:${NC}"
        git status --short
        echo -e "${YELLOW}   Consider committing or stashing before push${NC}"
    else
        echo -e "${GREEN}✅ Working directory clean${NC}"
    fi
    
    # 2. Check if branch is up to date with remote
    echo -e "\n${YELLOW}[2/5] Checking remote synchronization...${NC}"
    git fetch origin "$BRANCH" 2>/dev/null
    LOCAL_COMMIT=$(git rev-parse HEAD)
    REMOTE_COMMIT=$(git rev-parse "origin/$BRANCH" 2>/dev/null || echo "")
    
    if [ -z "$REMOTE_COMMIT" ]; then
        echo -e "${GREEN}✅ New branch, will create on remote${NC}"
    elif [ "$LOCAL_COMMIT" = "$REMOTE_COMMIT" ]; then
        echo -e "${YELLOW}ℹ️  Already up to date with remote${NC}"
    else
        BEHIND=$(git rev-list --count HEAD..origin/"$BRANCH" 2>/dev/null || echo 0)
        AHEAD=$(git rev-list --count origin/"$BRANCH"..HEAD 2>/dev/null || echo 0)
        
        if [ "$BEHIND" -gt 0 ]; then
            echo -e "${YELLOW}⚠️  Branch is $BEHIND commits behind origin/$BRANCH${NC}"
            echo -e "${YELLOW}   Consider: git pull --rebase origin $BRANCH${NC}"
        fi
        
        if [ "$AHEAD" -gt 0 ]; then
            echo -e "${GREEN}✅ Pushing $AHEAD new commits${NC}"
        fi
    fi
    
    # 3. Validate commit messages in push
    echo -e "\n${YELLOW}[3/5] Validating commit messages...${NC}"
    INVALID_COMMITS=""
    COMMITS_TO_PUSH=$(git rev-list origin/"$BRANCH"..HEAD 2>/dev/null || git rev-list HEAD)
    
    for commit in $COMMITS_TO_PUSH; do
        MSG=$(git log -1 --pretty=%B "$commit")
        # Check conventional commit format
        if ! [[ "$MSG" =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert) ]]; then
            INVALID_COMMITS="${INVALID_COMMITS}  • $(git log -1 --oneline $commit)\n"
        fi
    done
    
    if [ ! -z "$INVALID_COMMITS" ]; then
        echo -e "${YELLOW}⚠️  Non-conventional commits found:${NC}"
        echo -e "$INVALID_COMMITS"
    else
        echo -e "${GREEN}✅ All commits follow conventional format${NC}"
    fi
    
    # 4. Check for large files
    echo -e "\n${YELLOW}[4/5] Checking for large files...${NC}"
    LARGE_FILES=""
    for commit in $COMMITS_TO_PUSH; do
        FILES=$(git diff-tree --no-commit-id --name-only -r "$commit")
        for file in $FILES; do
            if [ -f "$file" ]; then
                SIZE=$(stat -f%z "$file" 2>/dev/null || stat --format=%s "$file" 2>/dev/null || echo 0)
                if [ "$SIZE" -gt 10485760 ]; then # 10MB
                    SIZE_MB=$((SIZE / 1048576))
                    LARGE_FILES="${LARGE_FILES}  • $file (${SIZE_MB}MB)\n"
                fi
            fi
        done
    done
    
    if [ ! -z "$LARGE_FILES" ]; then
        echo -e "${YELLOW}⚠️  Large files detected (>10MB):${NC}"
        echo -e "$LARGE_FILES"
        echo -e "${YELLOW}   Consider using Git LFS for large files${NC}"
    else
        echo -e "${GREEN}✅ No large files detected${NC}"
    fi
    
    # 5. Run tests if available
    echo -e "\n${YELLOW}[5/5] Running tests...${NC}"
    if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
        echo "Running npm test..."
        npm test --silent
        if [ $? -ne 0 ]; then
            echo -e "${RED}❌ Tests failed${NC}"
            ALL_PASSED=false
        else
            echo -e "${GREEN}✅ Tests passed${NC}"
        fi
    else
        echo -e "${YELLOW}ℹ️  No tests configured${NC}"
    fi
    
    # Final result
    echo -e "\n${BLUE}════════════════════════════════════════${NC}"
    
    if [ "$ALL_PASSED" = true ]; then
        echo -e "${GREEN}✅ Pre-push validation passed!${NC}"
        echo -e "${BLUE}════════════════════════════════════════${NC}\n"
    else
        echo -e "${RED}❌ Pre-push validation failed!${NC}"
        echo -e "\n${YELLOW}Options:${NC}"
        echo "  • Fix the issues and try again"
        echo "  • Use 'git push --no-verify' to bypass (not recommended)"
        echo -e "${BLUE}════════════════════════════════════════${NC}\n"
        exit 1
    fi
done

exit 0